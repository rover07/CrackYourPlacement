class Solution {
public:

//external function
//
//i pasted code of pivot element here from vs code
//we're finding pivot element here so we can decide which side our target might exist
int findPivot(vector<int> nums)
{
    int start = 0;
    int end = nums.size() - 1;
    int ans = -1;

    while (start <= end)
    {
        int mid = start + (end - start) / 2;

        if (start == end)
            return start;
        else if(mid + 1 <= end && nums[mid]>nums[mid+1] )
            return mid;
        else if(mid - 1 >= start && nums[mid-1]>nums[mid] )
            return mid-1;
    
        else if (nums[start] > nums[mid])
            end = mid - 1;
        else
            start = mid + 1;
    }
    return ans;
}
//Another external function for Binary search in line A or B part separated by pivot element
    int binarySearch(vector<int>& nums, int start, int end,int target)
    {
        while(start<=end)
        {
            int mid=start+(end-start)/2;
            
            if(nums[mid]==target)
                return mid;
            else if(nums[mid]>target)
                end=mid-1;
            else 
                start=mid+1;
        }
    return -1;
    }
// 
// code starts here
//    
    int search(vector<int>& nums, int target) {

    int ans=0; // It's value will be replaced later by index of target 
    int pivotIndex= findPivot(nums);
    
    if(target>=nums[0] && target <=nums[pivotIndex])//Line A
    {
        ans= binarySearch(nums,0,pivotIndex,target);
    }
    else //this means our target is on the right line ie line B
    {
        ans= binarySearch(nums,pivotIndex+1,nums.size()-1,target);
    }
    return ans;
    }
};


// // // Bruteforce
// class Solution {
// public:
//  int search(vector<int>& nums, int target) {
//     int size=nums.size();

//     for(int i=0;i<size;i++)
//     {
//         if(nums[i]==target)
//         {
//             return i;
//         }
//     }
//         return -1;
//     }
// };


