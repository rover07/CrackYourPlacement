/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

class Codec {
public:

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        if (!root) return "";
        string s = "";
        s += to_string(root->val) + ",";

        queue<TreeNode*> q;
        q.push(root);
        while (!q.empty()) {
            TreeNode* node = q.front();
            q.pop();

            if (node->left) {
                s += to_string(node->left->val) + ",";
                q.push(node->left);
            } else {
                s += "#,";
            }

            if (node->right) {
                s += to_string(node->right->val) + ",";
                q.push(node->right);
            } else {
                s += "#,";
            }
        }
        return s;
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        if (data.empty()) return nullptr;
        
        stringstream ss(data);
        string item;
        getline(ss, item, ',');
        
        TreeNode* root = new TreeNode(stoi(item));
        queue<TreeNode*> q;
        q.push(root);
        
        while (!q.empty()) {
            TreeNode* node = q.front();
            q.pop();
            
            if (getline(ss, item, ',')) {
                if (item != "#") {
                    TreeNode* leftChild = new TreeNode(stoi(item));
                    node->left = leftChild;
                    q.push(leftChild);
                }
            }
            
            if (getline(ss, item, ',')) {
                if (item != "#") {
                    TreeNode* rightChild = new TreeNode(stoi(item));
                    node->right = rightChild;
                    q.push(rightChild);
                }
            }
        }
        
        return root;
    }
};

// Your Codec object will be instantiated and called as such:
// Codec ser, deser;
// TreeNode* ans = deser.deserialize(ser.serialize(root));
