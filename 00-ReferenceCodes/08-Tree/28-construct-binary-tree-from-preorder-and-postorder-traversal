/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* constructTree(int preStart, int preEnd, int postStart, int postEnd,
                            vector<int>& preorder, vector<int>& postorder) {
                                
        if (preStart > preEnd || postStart > postEnd) return nullptr;

        TreeNode* root = new TreeNode(preorder[preStart]);

        if (preStart == preEnd) return root;

        int postIndex = postStart;

        while (postorder[postIndex] != preorder[preStart + 1]) postIndex++;

        int leftSubtreeSize = postIndex - postStart + 1;

        root->left = constructTree(preStart + 1, preStart + leftSubtreeSize, postStart, postIndex, preorder, postorder);
        root->right = constructTree(preStart + leftSubtreeSize + 1, preEnd, postIndex + 1, postEnd - 1, preorder, postorder);

        return root;
    }

    TreeNode* constructFromPrePost(vector<int>& preorder, vector<int>& postorder) {
        int n = preorder.size();
        return constructTree(0, n - 1, 0, n - 1, preorder, postorder);
    }
};