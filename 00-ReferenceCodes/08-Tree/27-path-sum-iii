/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void solve(TreeNode* root, int targetSum, unordered_map<long long, int>& sumFreq, int& ans, long long sum) {
        if (root == nullptr) return;

        sum += root->val;
        long long x = sum - targetSum;
        if (sumFreq.find(x) != sumFreq.end()) {
            ans += sumFreq[x];
        }
        sumFreq[sum]++;

        solve(root->left, targetSum, sumFreq, ans, sum);
        solve(root->right, targetSum, sumFreq, ans, sum);
        
        sumFreq[sum]--;
    }

    int pathSum(TreeNode* root, int targetSum) {
        unordered_map<long long, int> sumFreq;
        sumFreq[0] = 1;
        int ans = 0;
        solve(root, targetSum, sumFreq, ans, 0);
        return ans;
    }
};