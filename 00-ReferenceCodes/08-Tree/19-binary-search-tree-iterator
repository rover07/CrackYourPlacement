/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
void inorder(TreeNode* root, vector<int>& arr) {
    if (root == nullptr) return;

    inorder(root->left, arr);
    arr.push_back(root->val);
    inorder(root->right, arr);
}

class BSTIterator {
private:
    vector<int> arr;
    int i;
    int size;

public:
    BSTIterator(TreeNode* root) {
        inorder(root, arr);
        i = 0;
        size = arr.size();
    }
    
    int next() {
        if (i < size) {
            return arr[i++];
        }
        return -1;
    }
    
    bool hasNext() {
        return i < size;
    }
};
/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator* obj = new BSTIterator(root);
 * int param_1 = obj->next();
 * bool param_2 = obj->hasNext();
 */