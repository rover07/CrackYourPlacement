class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        if (!root) {
            return 0;
        }

        int maxWidth = 0;
        queue<pair<TreeNode*, unsigned long long>> q;
        q.push({root, 0});

        while (!q.empty()) {
            int size = q.size();
            unsigned long long leftmost = q.front().second;
            unsigned long long rightmost = leftmost;

            for (int i = 0; i < size; i++) {
                TreeNode* node = q.front().first;
                unsigned long long idx = q.front().second;
                q.pop();

                rightmost = idx;

                if (node->left) {
                    q.push({node->left, 2 * idx});
                }
                if (node->right) {
                    q.push({node->right, 2 * idx + 1});
                }
            }

            maxWidth = max(maxWidth,int(rightmost - leftmost + 1));
        }

        return maxWidth;
    }
};