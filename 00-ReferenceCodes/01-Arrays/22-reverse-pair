class Solution {
public:
    void merge(int low, int mid, int high, vector<int>& nums, int &cnt) {
        vector<int> temp;
        int count = 0;
        int i = low, j = mid + 1;
        
        while (i <= mid) {
            while (j <= high && nums[i] > 2LL * nums[j]) {
                j++;
                count++;
            }
            cnt += count;
            i++;
        }

        i = low;
        j = mid + 1;

        while (i <= mid && j <= high) {
            if (nums[i] <= nums[j]) {
                temp.push_back(nums[i]);
                i++;
            } else {
                temp.push_back(nums[j]);
                j++;
            }
        }

        while (i <= mid) {
            temp.push_back(nums[i]);
            i++;
        }

        while (j <= high) {
            temp.push_back(nums[j]);
            j++;
        }

        for (int k = 0; k < temp.size(); k++) {
            nums[low + k] = temp[k];
        }
    }

    void mergesort(int low, int high, vector<int>& nums, int &cnt) {
        if (low >= high) {
            return;
        }

        int mid = low + (high - low) / 2;
        mergesort(low, mid, nums, cnt);
        mergesort(mid + 1, high, nums, cnt);
        merge(low, mid, high, nums, cnt);
    }

    int reversePairs(vector<int>& nums) {
        int cnt = 0;
        mergesort(0, nums.size() - 1, nums, cnt);
        return cnt;
    }
};
