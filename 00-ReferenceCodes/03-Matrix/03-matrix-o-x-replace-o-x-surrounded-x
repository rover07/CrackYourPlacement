class Solution {
public:
    void dfs(int row, int col, vector<vector<char>>& mat, vector<vector<int>>& vis) {
        vis[row][col] = 1;
        int drow[4] = {-1, 1, 0, 0};
        int dcol[4] = {0, 0, -1, 1};
        
        for (int i = 0; i < 4; i++) {
            int nrow = row + drow[i];
            int ncol = col + dcol[i];
            
            if (nrow >= 0 && ncol < mat[0].size() && ncol >= 0 && nrow < mat.size() &&
                vis[nrow][ncol] == 0 && mat[nrow][ncol] == 'O') {
                dfs(nrow, ncol, mat, vis);
            }
        }
    }
    
    vector<vector<char>> fill(int n, int m, vector<vector<char>> mat) {
        vector<vector<int>> vis(n, vector<int>(m, 0));
        
        for (int i = 0; i < m; i++) {
            if (mat[0][i] == 'O' && !vis[0][i]) {
                dfs(0, i, mat, vis);
            }
        }
        
        for (int i = 0; i < n; i++) {
            if (mat[i][0] == 'O' && !vis[i][0]) {
                dfs(i, 0, mat, vis);
            }
        }
        
        for (int i = 0; i < m; i++) {
            if (mat[n - 1][i] == 'O' && !vis[n - 1][i]) {
                dfs(n - 1, i, mat, vis);
            }
        }
        
        for (int i = 0; i < n; i++) {
            if (mat[i][m - 1] == 'O' && !vis[i][m - 1]) {
                dfs(i, m - 1, mat, vis);
            }
        }
        
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (!vis[i][j]) {
                    mat[i][j] = 'X';
                }
            }
        }
        return mat;
    }
};
