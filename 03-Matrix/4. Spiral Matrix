class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        
        vector<int> ans;
        int rowSize=matrix.size();
        int colSize=matrix[0].size();
        int totalSize=rowSize*colSize;

        int startingRow=0;
        int endingCol=colSize-1;
        int endingRow=rowSize-1;
        int startingCol=0;

        int count=0;

        while(count<totalSize)
        {
            //for starting row
            //This is a catch the && part to avoid running loop if count is exceeded, as it's incremented inside the while loop too as we have a long list of for loops inside it'll increment  tremendously and while is far away to check so we check in place too.
            for(int i=startingCol;i<=endingCol && count<totalSize;i++)
            {
                ans.push_back(matrix[startingRow][i]);
                count++;
             
            }
                startingRow++;

            //for ending col
              for(int i=startingRow;i<=endingRow  && count<totalSize;i++)
            {
                ans.push_back(matrix[i][endingCol]);
                count++;
            }  
                endingCol--;

             //for ending row
              for(int i=endingCol;i>=startingCol  && count<totalSize ;i--)
            {
                ans.push_back(matrix[endingRow][i]);
                count++;
            }  
                endingRow--;

             //for starting col
              for(int i=endingRow;i>=startingRow  && count<totalSize;i--)
            {
                ans.push_back(matrix[i][startingCol]);
                count++;
            }  
                startingCol++;
    }
        return ans;
    }
};