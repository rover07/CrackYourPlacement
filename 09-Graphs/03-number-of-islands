class Solution {
public:
    int numIslands(vector<vector<char>>& grid) {
       int drow[] = {-1,0,1,0};
       int dcol[] = {0,1,0,-1}; 

       int n = grid.size();
       int m = grid[0].size();

       vector<vector<int>> vis(n,vector<int>(m,0));

       int ans = 0;
       for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(grid[i][j] == '1' && vis[i][j] == 0){
                ans++; 
                dfs(i,j,vis,grid,drow,dcol);
            }
        }
       }
       return ans;
    }

    void dfs(int row,int col,vector<vector<int>>& vis,vector<vector<char>>& grid, int drow[], int dcol[]){
        vis[row][col] = 1;

        for(int i=0;i<4;i++){
            int nrow = row + drow[i];
            int ncol = col + dcol[i];

            if(nrow >= 0 && nrow < grid.size() && ncol >= 0 && ncol < grid[0].size() &&
            vis[nrow][ncol] == 0 && grid[nrow][ncol] == '1'){
                dfs(nrow,ncol,vis,grid,drow,dcol);
            }
        }
    }
};